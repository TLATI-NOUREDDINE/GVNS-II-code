#include <iostream>
#include <string.h>
#include <math.h>
#include <vector>
#include <algorithm>
#include <time.h>
using namespace std;
#define MAX 20 // number of jobs in this example (n=20)
#define number_machine 2 // number of machines 
#include <chrono>  // Include chrono library
using namespace std;
using namespace std::chrono;  // Use chrono namespace
#include <random>
#include <tuple>
#include <ctime> 

// Structures definitions
struct job
{
  int job_id;
  int job_processing;
  int job_set_up;
};

struct Schedule
{
  int job_id;
  int job_machine_number;
  int job_start_time;
  int job_end_load;
  int job_end_time;
};

// function to check if the job is scheduled
int job_in_Schedule (Schedule Optimal_shedule[MAX], job F)
{
  int i;
  bool trouve = 0;
  for (i = 0; i < MAX; i++)
    {
      if (Optimal_shedule[i].job_id == F.job_id)
    {
      trouve = 1;
      break;
    }
    }
  return trouve;
}

// function used to calculate the idle time 
int Calcul_IT (int a, int b)
{
  if (a > b)
    return 0;
  else
    return (b - a);
}

// function to detect the available machine
int Machine_Min (int T[number_machine])
{
  int Min = T[0], j, indice_min = 0;
  for (j = 0; j < number_machine; j++)
    {
      if (T[j] < Min)
    {
      Min = T[j];
      indice_min = j;
    }
    }
  return indice_min;
}

// function to Know the minimal completion time
int Ct_Min (int T[number_machine])
{
  int Min = T[0], j;
  for (j = 0; j < number_machine; j++)
    {
      if (T[j] < Min)
    Min = T[j];
    }
  return Min;
}

// function to calculate the difference between completion times
int Min_diff (int T[MAX])
{
  int Diff[MAX];
  for (int i = 0; i < MAX; i++)
    {
      Diff[i] = T[i] - Ct_Min (T);
    }
  for (int i = 0; i < MAX; i++)
    {
      if (Diff[i] == 0)
    Diff[i] = 1000;
    }
  return Ct_Min (Diff);
}

//function used to verify one heuristic condition
int Min_diff_val (int T[MAX])
{
  int V, min;
  for (int i = 0; i < MAX; i++)
    {
      if (T[i] == 0)
    continue;
      else
    {
      V = T[i];
      break;
    }
    }
  for (int i = 0; i < MAX; i++)
    {
      min = V;
      if (T[i] < min && T[i] != 0)
      min = T[i];
    }
  return min;
}

// function to identify the job with minimal set-up
int indice_min_setup (job T[MAX])
{
  int indice_min = 0, min_setup = T[0].job_set_up;
  for (int i = 0; i < MAX; i++)
    {
      if (T[i].job_set_up < min_setup)
    {
      min_setup = T[i].job_set_up;
      indice_min = i;
    }
    }
  return indice_min;
}

// function used to make the first order of jobs in list scheduling
bool compareJobs (const job & a, const job & b) 
{ 
    if (a.job_set_up == b.job_set_up)
    {// If setup times are equal, compare by processing times in non-decreasing order
    return a.job_processing < b.job_processing;
    }
    // Otherwise, sort by setup times in non-increasing order
    return a.job_set_up > b.job_set_up;
}

//function for jobs scheduling and objective function calculation
int calculateIT(job T[MAX]) {
    int L_F = 0; // Initial value for L_F
    int IT = 0;  // Idle time
    Schedule Optimal_shedule[MAX];
    int ct[number_machine] = {0}; // Initialize ct array to 0
    //std::sort(T, T+ MAX, compareJobs); used in main() function
    int s = indice_min_setup(T);
    job F = T[s];
    L_F = F.job_processing; // Set L_F to the processing time of the first job
    // First scheduled job
    Optimal_shedule[0].job_id = F.job_id;
    Optimal_shedule[0].job_machine_number = Machine_Min(ct) + 1;
    Optimal_shedule[0].job_start_time = 0;
    Optimal_shedule[0].job_end_load = F.job_set_up;
    Optimal_shedule[0].job_end_time = F.job_set_up + F.job_processing;
    ct[0] = Optimal_shedule[0].job_end_time;
    IT = 0;
    int k = 1;
    for(int i=1; i<MAX;i++){
     Optimal_shedule[i].job_id=7777; // To avoid random initialization
     }
    while (k < MAX) {
        bool jobScheduled = false; // Track whether a job was scheduled
        for (int j = 0; j < MAX; j++) {
            if (!job_in_Schedule(Optimal_shedule, T[j]) &&
                (T[j].job_set_up <= L_F) &&
                (T[j].job_set_up + T[j].job_processing != L_F)) {
                int h = Machine_Min(ct);
                Optimal_shedule[k].job_id = T[j].job_id;
                Optimal_shedule[k].job_machine_number = h + 1;
                Optimal_shedule[k].job_start_time = std::max(Ct_Min(ct), Optimal_shedule[k - 1].job_end_load);
                IT += Calcul_IT(Ct_Min(ct), Optimal_shedule[k - 1].job_end_load);
                Optimal_shedule[k].job_end_load = Optimal_shedule[k].job_start_time + T[j].job_set_up;
                Optimal_shedule[k].job_end_time = Optimal_shedule[k].job_end_load + T[j].job_processing;
                ct[h] = Optimal_shedule[k].job_end_time;
                if (k < number_machine - 1) {
                    L_F = Min_diff_val(ct) - Optimal_shedule[k].job_end_load;
                } else {
                    L_F = Min_diff(ct);
                }
                jobScheduled = true; // A job was scheduled, exit the loop
                break;
            }
        }
        if (!jobScheduled) {
            L_F = L_F + 1;
            k--;
        }
        k++;
    }
    ///////////////////// Print the optimal schedule Obtained from the Solution of GVNS (calculateIT(Solution) //////////////////////////
    //std::cout << "Optimal Schedule:\n";
    //std::cout << "Job ID\tMachine\tStart Time\tEnd Load\tEnd Time\n";
    //for (int i = 0; i < MAX; i++) {
        //if (Optimal_shedule[i].job_id != 7777) { // Only print valid scheduled jobs
            //std::cout << Optimal_shedule[i].job_id << "\t"
                      //<< Optimal_shedule[i].job_machine_number << "\t"
                      //<< Optimal_shedule[i].job_start_time << "\t\t"
                      //<< Optimal_shedule[i].job_end_load << "\t\t"
                      //<< Optimal_shedule[i].job_end_time << "\n";
        //}
    //}
    return IT;
}

// Local Search (LS) structures definitions 
// swap structure

void swap(job *x, job *y) {
    job temp = *x;
    *x = *y;
    *y = temp;
}

job* swaplocalSearch(job H[MAX]) {
    int i,j;
    job* newSolution = new job[MAX];
    std::random_device rd;
    std::mt19937 gen(rd());
    //Random generation of i and j (distinct indices)
    std::uniform_int_distribution<int> dist(0, MAX - 1);
    do {
        i = dist(gen);
        j = dist(gen);
    } while (j == i);
    memcpy(newSolution, H, sizeof(job) * MAX);
    swap(&newSolution[i], &newSolution[j]); 
    return newSolution;
}

// Insert structure 
void insertJob(std::vector<job>& T, int jobIndex1, int jobIndex2) {
    job job_insert = T[jobIndex1];
    T.erase(T.begin() + jobIndex1);
    T.insert(T.begin() + jobIndex2, job_insert);
}

job* Inserlocalsearch(job T[MAX]) {
    job* newSolution = new job[MAX];
    int i,j;
    srand(time(NULL));
    std::random_device rd;
    std::mt19937 gen(rd());
    //Random generation of i and j (distinct indices)
    std::uniform_int_distribution<int> dist(0, MAX - 1);
    do {
        i = dist(gen);
        j = dist(gen);
    } while (j == i);
    std::vector<job> vectorT(T, T + MAX);
    insertJob(vectorT, i, j);
    for (int h = 0; h < MAX; h++) {
            newSolution[h] = vectorT[h];
        }
    return newSolution;
}

//Reverse structure
void reverseSubset(std::vector<job>& T, int startIndex, int endIndex) {
    std::reverse(T.begin() + startIndex, T.begin() + endIndex + 1);
}

job* Reverselocalsearch(job T[MAX]) {
    job* newSolution = new job[MAX];
    std::random_device rd;
    std::mt19937 gen(rd());
    //Random generation of i and j (distinct indices)
    std::uniform_int_distribution<int> dist(0, MAX - 1);
    int i, j;
    do {
        i = dist(gen);
        j = dist(gen);
    } while (j < i || i==j);
    std::vector<job> vectorT(T, T + MAX);
    reverseSubset(vectorT, i, j);
    for (int h = 0; h < MAX; h++) {
        newSolution[h] = vectorT[h];
    }
    return newSolution;
}

// Local search function
job* LocalSearch(job H[MAX], int k) {
    job* PossibleSolution = new job[MAX];
        switch (k) {
                case 1:
                    //printf("Swap Structure -----------------------------------\n");
                    PossibleSolution = swaplocalSearch(H);
                    break;
                case 2:
                    //printf("Reverse Structure---------------------------------\n");
                    PossibleSolution = Reverselocalsearch(H);
                    break;
                case 3:
                    //printf("Insert Structure---------------------------------\n");
                    PossibleSolution = Inserlocalsearch(H);
                    break;
            
                default:
                    std::cout << "erreur" << std::endl;
                    break;
        }
    return PossibleSolution;
    }

// function used to generate random values   
int Random (int a, int b) // [a,b]
{
    return (a+(rand()%((b-a)+1)));
}

// Schaking function
job* shake(job H[MAX]) {
    job* shakenSolution = new job[MAX];
    shakenSolution = Reverselocalsearch(H);
    return shakenSolution;
}

//VND function
job* VND(job* T,int lmax) {
    int l;
    bool improvement;
    job* Solution = new job[MAX];
    int s = indice_min_setup(T);
    int min_Setup=T[s].job_set_up;
    srand(time(NULL));
    for (int i = 0; i < MAX; i++) {
        Solution[i] = T[i];
    }
    do {
        l = 1;
        improvement=false;
        do {  
              printf("L=%d\n",l);
              job* CurrentSolution = LocalSearch(Solution, l);
              if (calculateIT(CurrentSolution) < calculateIT(Solution)) {
              for (int i = 0; i < MAX; i++) {
                Solution[i] = CurrentSolution[i];
              }
              if(calculateIT(CurrentSolution)==min_Setup) return Solution;
              l = 1;
              improvement = true;
              }
              else l++;
              delete[] CurrentSolution;
        } while(l<=lmax);
    } while(improvement);
    return Solution;
}

std::pair<job*, double> GVNS(job* H, int kmax, int maxCPU) {
    int k;
    job* ShakingSolution = new job[MAX];
    job* VNDSolution = new job[MAX];
    job* Solution = new job[MAX];
    int s = indice_min_setup(H);
    int min_Setup=H[s].job_set_up;
    printf("minsetup=%d\n",min_Setup);
    for (int i = 0; i < MAX; i++) {
        Solution[i] = H[i]; // Solution initialization
    }
    std::sort(Solution, Solution + MAX, compareJobs); 
    srand(time(NULL));
    // Define CPU time variables
    std::chrono::high_resolution_clock::time_point startTime, endTime;
    std::chrono::duration<double, std::milli> elapsedTime;
    std::chrono::high_resolution_clock::time_point endTimeGVNS;
    std::chrono::duration<double, std::milli> elapsedTimeGVNS;
    double elapsedTimeInSeconds=0;
    double elapsedTimeGVNSInSeconds=0;
    startTime = std::chrono::high_resolution_clock::now(); // Start measuring GVNS CPU time
    do {
        k = 1;
        while (k <= kmax) {
            ShakingSolution = shake(Solution);
            VNDSolution = VND(ShakingSolution, 3);
            if (calculateIT(VNDSolution) < calculateIT(Solution)) {
                for (int i = 0; i < MAX; i++) {
                    Solution[i] = VNDSolution[i];
                }
                k = 1; // Reset consecutive iterations without improvement
                endTime = std::chrono::high_resolution_clock::now();
                elapsedTime = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);
                elapsedTimeInSeconds = elapsedTime.count() / 1000.0; // Convertir en secondes
                printf("elapsedTimeInSeconds= %f\n",elapsedTimeInSeconds);
                if(calculateIT(VNDSolution)==min_Setup)  return std::make_pair(Solution, elapsedTimeInSeconds);
            } 
            else {
                k++;
            }
        }   
        endTimeGVNS = std::chrono::high_resolution_clock::now(); // Set end time when GVNS finishes
        elapsedTimeGVNS = std::chrono::duration_cast<std::chrono::milliseconds> (endTimeGVNS - startTime) ; // Calculate elapsed time
        elapsedTimeGVNSInSeconds=elapsedTimeGVNS.count() / 1000.0 ;
        // Check if elapsed CPU time exceeds the maximum allowed
        if (elapsedTimeGVNSInSeconds >= maxCPU) {
            break; // Exit the GVNS loop if time limit is reached
        }

    } while (true);
    delete[] ShakingSolution;
    delete[] VNDSolution;
    return std::make_pair(Solution, elapsedTimeInSeconds);
}


int main() {
        FILE* fichier = NULL;
        if ((fichier = fopen("test.txt", "a")) == NULL) {
           fprintf(stderr, "FILE ERROR...\n");
           exit(EXIT_FAILURE);
        }
        int num_instances = 5;
        int num_experiments = 10;
        int processing_values[5][MAX] = {
    //{},
    //{},
    //{},
    //{},
    //{},
};
                
        int setup_values[5][MAX] = {
    //{},
    //{},
    //{},
    //{},
    //{},
};

        for (int inst = 0; inst < num_instances; inst++) {
            double Somme_Interf_ration0 = 0;
            double Somme_execution_time0 = 0;
            double Min_IT0 = 3000;
            double LB = 0;
            job* Solution = new job[MAX];
            fprintf(fichier, "%d\t%d\t%g\n", MAX, number_machine, 0.8); // server load (L=0.8) in this case
            for (int k = 0; k < num_experiments; k++) {
                job Q[MAX];
                double executionTime0 = 0;
                srand(static_cast<unsigned>(time(NULL)) + k);
                // Assign processing and setup values from the current instance
                for (int i = 0; i < MAX; i++) {
                    Q[i].job_id = i;
                    Q[i].job_processing = processing_values[inst][i];
                    Q[i].job_set_up = setup_values[inst][i];
                }
                int s = indice_min_setup(Q);
                LB = Q[s].job_set_up;
                std::tie(Solution, executionTime0) = GVNS(Q, 15, 200); //(kmax=15 and maxCPU = 200 seconds in this case)
                if (calculateIT(Solution) == LB) fprintf(fichier, "Lower bound was reached for solution0\n");
                Somme_execution_time0 += executionTime0;
                int totalInterferenceTime0 = calculateIT(Solution);
                fprintf(fichier,"experiment %d\t",k); fprintf(fichier,"IT=%d\t",totalInterferenceTime0); fprintf(fichier,"cpu==%f\n",executionTime0);
                Somme_Interf_ration0 += totalInterferenceTime0;
                if (totalInterferenceTime0 < Min_IT0) Min_IT0 = totalInterferenceTime0;
            }    
            fprintf(fichier, "Instance %d Results:\n", inst + 1);
            fprintf(fichier, "LB = %f\t \t", LB);
            fprintf(fichier, "Best_IT = %f\t \t", Min_IT0);
            fprintf(fichier, "Avg_IT = %f\t \t", Somme_Interf_ration0 / num_experiments);
            fprintf(fichier, "Avg_CPU = %f\n", Somme_execution_time0 / num_experiments);
            fprintf(fichier, "----------------------------------\n");
        }
        fclose(fichier);
        return 0;
    }
